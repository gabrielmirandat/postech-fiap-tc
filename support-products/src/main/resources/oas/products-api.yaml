openapi: 3.0.2

info:
  title: Products Support API
  version: 1.0.0
  description: Enable products platform
  contact:
    name: Gabriel M. Miranda
    email: gabrielmirandatt@gmail.com
    url: https://gabrielmirandatt.com
  license:
    name: Apache 2.0
    url: 'https://www.apache.org/licenses/LICENSE-2.0'

tags:
  - name: products
    description: Handling products

servers:
  - url: http://localhost:8080

paths:
  /products:
    get:
      tags:
        - products
      summary: Find Products by Query
      description: Filter products by parameters
      operationId: findProductsByQuery
      parameters:
        - name: category
          in: query
          description: Category values that need to be considered for filter
          required: false
          explode: true
          schema:
            type: string
            $ref: '#/components/schemas/ProductCategoryDTO'
      responses:
        '200':
          description: Product search response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponse'
        '401':
          $ref: '#/components/responses/ErrorResponse'
        '403':
          $ref: '#/components/responses/ErrorResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse'
        '500':
          $ref: '#/components/responses/ErrorResponse'
      security:
        - hydra:
            - products.read
    post:
      tags:
        - products
      summary: Add Product in Menu
      description: Add new product in the restaurant
      operationId: addProduct
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductRequest'
      responses:
        '201':
          description: Product created response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductCreated'
        '401':
          $ref: '#/components/responses/ErrorResponse'
        '403':
          $ref: '#/components/responses/ErrorResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse'
        '500':
          $ref: '#/components/responses/ErrorResponse'
      security:
        - hydra:
            - products.write
  /products/{productId}:
    get:
      tags:
        - products
      summary: Find Product By ID
      description: Returns a single product by ID
      operationId: getProductById
      parameters:
        - name: productId
          in: path
          description: ID of product to return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Product search response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponse'
        '401':
          $ref: '#/components/responses/ErrorResponse'
        '403':
          $ref: '#/components/responses/ErrorResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse'
        '404':
          $ref: '#/components/responses/ErrorResponse'
        '500':
          $ref: '#/components/responses/ErrorResponse'
      security:
        - hydra:
            - products.read
    delete:
      tags:
        - products
      summary: Deletes a Product by ID
      description: Deletes a product from menu
      operationId: deleteProduct
      parameters:
        - name: productId
          in: path
          description: Product id to delete
          required: true
          schema:
            type: string
      responses:
        '204':
          description: OK
        '401':
          $ref: '#/components/responses/ErrorResponse'
        '403':
          $ref: '#/components/responses/ErrorResponse'
        '500':
          $ref: '#/components/responses/ErrorResponse'
      security:
        - hydra:
            - products.read
            - products.write
  /ingredients:
    get:
      tags:
        - products
      summary: Find Ingredients by Query
      description: Filter ingredients by parameters
      operationId: findIngredientsByQuery
      parameters:
        - name: category
          in: query
          description: Category values that need to be considered for filter
          required: false
          explode: true
          schema:
            type: string
            $ref: '#/components/schemas/ProductCategoryDTO'
      responses:
        '200':
          description: Ingredient search response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IngredientResponse'
        '401':
          $ref: '#/components/responses/ErrorResponse'
        '403':
          $ref: '#/components/responses/ErrorResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse'
        '500':
          $ref: '#/components/responses/ErrorResponse'
      security:
        - hydra:
            - products.read
    post:
      tags:
        - products
      summary: Add Ingredient in Menu
      description: Add new ingredient in the restaurant
      operationId: addIngredient
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IngredientRequest'
      responses:
        '201':
          description: Ingredient created response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IngredientCreated'
        '401':
          $ref: '#/components/responses/ErrorResponse'
        '403':
          $ref: '#/components/responses/ErrorResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse'
        '500':
          $ref: '#/components/responses/ErrorResponse'
      security:
        - hydra:
            - products.write

components:
  schemas:
    ProductCategoryDTO:
      type: string
      enum:
        - burger
        - accompaniment
        - dessert
        - drink
    ProductIngredientRequest:
      type: object
      required:
        - ingredientId
        - quantity
      properties:
        ingredientId:
          type: string
          description: IngredientId of the product
        quantity:
          type: integer
          minimum: 1
          maximum: 4
          description: Quantity of ingredients of same type in product
    ProductRequest:
      type: object
      required:
        - name
        - description
        - category
        - price
        - ingredients
      properties:
        name:
          type: string
          description: Product name
        description:
          type: string
          description: Product description for menu
        category:
          $ref: '#/components/schemas/ProductCategoryDTO'
          description: Product category
        price:
          type: number
          description: Price of the product
        ingredients:
          type: array
          description: Ingredients that compose this product
          minimum: 1
          maximum: 6
          items:
            $ref: '#/components/schemas/ProductIngredientRequest'
    IngredientRequest:
      type: object
      required:
        - name
        - category
        - price
      properties:
        name:
          type: string
          description: Name of the ingredient
        category:
          $ref: '#/components/schemas/ProductCategoryDTO'
          description: Category of the ingredient
        price:
          type: number
          format: double
          description: Price of the ingredient
          minimum: 0.1
    ProductCreated:
      type: object
      required:
        - productId
      properties:
        productId:
          type: string
          description: Generated productId for the Product
    IngredientCreated:
      type: object
      required:
        - ingredientId
      properties:
        ingredientId:
          type: string
          description: Generated ingredientId for the Ingredient
    IngredientResponse:
      type: object
      required:
        - id
        - name
        - category
        - price
      properties:
        id:
          type: string
          description: ID of the Ingredient
        name:
          type: string
          description: Name of the Ingredient
        category:
          $ref: '#/components/schemas/ProductCategoryDTO'
          description: Category of the Ingredient
        price:
          type: number
          format: double
          description: Price of the ingredient
          minimum: 0.1
    ProductResponse:
      type: object
      required:
        - id
        - name
        - description
        - ingredients
        - category
        - price
      properties:
        id:
          type: string
          description: ID of the Product
        name:
          type: string
          description: Name of the Product
        description:
          type: string
          description: Description of the Product in menu
        ingredients:
          type: array
          description: Ingredients of the Product
          items:
            $ref: '#/components/schemas/IngredientResponse'
        category:
          $ref: '#/components/schemas/ProductCategoryDTO'
          description: Category of the Product
        price:
          type: number
          format: double
          description: Price of the product
          minimum: 0.1
    ErrorResponse:
      type: object
      required:
        - code
        - type
        - message
      properties:
        code:
          type: integer
          format: int32
          description: Code of the error
        type:
          type: string
          description: Type of the error
        message:
          type: string
          description: Message of the error

  requestBodies:
    ProductRequest:
      description: Product request object
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProductRequest'
          example:
            name: "X-Burguer"
            description: "Carro chefe da casa"
            category: "burger"
            price: 10.90
            ingredients:
              - ingredientId: "12345678-ingr-10092008"
                quantity: 2
    IngredientRequest:
      description: Ingredient request object
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/IngredientRequest'
          example:
            name: "Costela Meat"
            category: "burger"
            price: 2.90

  responses:
    ProductCreated:
      description: Product created response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProductCreated'
          example:
            productId: "12345678-prdc-10092008"
    IngredientCreated:
      description: Ingredient created response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/IngredientCreated'
          example:
            ingredientId: "12345678-ingr-10092008"
    IngredientResponse:
      description: Ingredient search response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/IngredientResponse'
          example:
            id: "12345678-ingr-10092008"
            name: "Costela Meat"
            category: "burger"
            price: 2.90
    ProductResponse:
      description: Product search response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProductResponse'
          example:
            id: "12345678-prdc-10092008"
            name: "X-Burger"
            description: "Carro chefe"
            category: "burger"
            price: 10.90
            ingredients:
              - id: "12345678-ingr-10092008"
                name: "Costela meat"
                category: "burger"
                price: 2.90
    ErrorResponse:
      description: Error response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            code: "ERR-CODE"
            type: "422"
            message: "Precondition Failed"

  securitySchemes:
    hydra:
      type: openIdConnect
      openIdConnectUrl: 'https://competent-cori-vgu1750x6j.projects.oryapis.com/.well-known/openid-configuration'

security:
  - hydra:
      - products.write
      - products.read