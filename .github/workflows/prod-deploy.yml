name: Flow to deploy production artifact

on:
  push:
    branches:
     - feature**

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install Protocol Buffers Compiler
        run: sudo apt-get update && sudo apt-get install -y protobuf-compiler
      - name: Check protoc version
        run: protoc --version
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: Build with Maven
        run: mvn -B package -Dmaven.test.skip=true
      - name: Upload orders-api artifact
        uses: actions/upload-artifact@v2
        with:
          name: orders-artifact
          path: |
            ./orders/target/orders*.jar
            ./orders/target/newrelic/newrelic.jar
            ./orders/src/main/resources/newrelic/newrelic.yml
      - name: Upload menu-api artifact
        uses: actions/upload-artifact@v2
        with:
          name: menu-artifact
          path: ./menu/target/menu*.jar
  publish:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Download orders-api artifact
        uses: actions/download-artifact@v2
        with:
          name: orders-artifact
          path: ./temp/orders
      - name: Reorganize orders-api files
        run: |
          find ./temp/orders -type f -exec printf '%s\n' {} \;
          mkdir -p ./orders/target/newrelic
          mkdir -p ./orders/src/main/resources/newrelic
          mv ./temp/orders/target/newrelic/newrelic.jar ./orders/target/newrelic/newrelic.jar
          mv ./temp/orders/src/main/resources/newrelic/newrelic.yml ./orders/src/main/resources/newrelic/newrelic.yml
          mv ./temp/orders/target/orders-0.0.1-SNAPSHOT.jar ./orders/target/
      - name: Download menu-api artifact
        uses: actions/download-artifact@v2
        with:
          name: menu-artifact
          path: ./menu/target
      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build and push Docker images
        run: |
          ORDERS_REPOSITORY="gabrielmirandat/postech-fiap-tc-orders-api"
          MENU_REPOSITORY="gabrielmirandat/postech-fiap-tc-menu-api"
          SHORT_SHA=$(git rev-parse --short ${{ github.sha }})
          TAGGED_VERSION="v${{ github.run_number }}-$SHORT_SHA"
          
          docker build -t $ORDERS_REPOSITORY:$TAGGED_VERSION ./orders
          docker push $ORDERS_REPOSITORY:$TAGGED_VERSION
          docker build -t $MENU_REPOSITORY:$TAGGED_VERSION ./menu
          docker push $MENU_REPOSITORY:$TAGGED_VERSION
  tag:
    needs: publish
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Create and push tag
        run: |
          SHORT_SHA=$(git rev-parse --short ${{ github.sha }})
          TAGGED_VERSION="v${{ github.run_number }}-$SHORT_SHA"
          TAGGED_COMMIT_URL="https://github.com/${{ github.repository }}/commit/${{ github.sha }}"
          
          git config --global user.name 'github-actions'
          git config --global user.email 'github-actions@github.com'
          git tag -a $TAGGED_VERSION -m "Deploying version $TAGGED_VERSION. Details: $TAGGED_COMMIT_URL"
          git push origin $TAGGED_VERSION
  notify:
    needs: tag
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Prepare Notification Message
        run: |
          SHORT_SHA=$(git rev-parse --short ${{ github.sha }})
          TAGGED_VERSION="v${{ github.run_number }}-$SHORT_SHA"
          TAGGED_VERSION_URL="https://github.com/${{ github.repository }}/releases/tag/$TAGGED_VERSION"
          TAGGED_COMMIT_URL="https://github.com/${{ github.repository }}/commit/${{ github.sha }}"
  
          echo "DISCORD_ARGS=A build ${{ github.run_number }} foi concluída com sucesso! Confira os detalhes no commit: $TAGGED_COMMIT_URL. Veja a tag da versão: $TAGGED_VERSION_URL" >> $GITHUB_ENV

      - name: Notify Discord
        uses: Ilshidur/action-discord@master
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK_URL }}
        with:
          args: ${{ env.DISCORD_ARGS }}
  cleanup-registry:
    needs: publish
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: List and Delete Old Tags for Orders-API
        env:
          DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_HUB_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          REPOSITORY="gabrielmirandat/postech-fiap-tc-orders-api"
          
          TOKEN_RAW=$(curl -s -X POST -H "Content-Type: application/json" -d "{\"username\": \"${DOCKER_HUB_USERNAME}\", \"password\": \"${DOCKER_HUB_PASSWORD}\"}" https://hub.docker.com/v2/users/login)
          TOKEN=$(echo $TOKEN_RAW | jq -r .token)
          
          # Verifica se o token foi obtido com sucesso
          if [ -z "$TOKEN" ] || [ "$TOKEN" == "null" ]; then
            echo "Failed to obtain token."
            exit 1
          fi
  
          TAGS=$(curl -s -H "Authorization: JWT $TOKEN" "https://hub.docker.com/v2/repositories/$REPOSITORY/tags" | jq -r '.results | sort_by(.tag_last_pushed) | .[].name')
          TAGS_ARRAY=($TAGS)
          TOTAL_TAGS=${#TAGS_ARRAY[@]}
          KEEP=5
          DELETE_COUNT=$(($TOTAL_TAGS-$KEEP))

          if [ $DELETE_COUNT -gt 0 ]; then
            for ((i=0; i<$DELETE_COUNT; i++)); do
              TAG=${TAGS_ARRAY[$i]}
              echo "Deleting tag $TAG from $REPOSITORY..."
              DELETE_RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" -X DELETE -H "Authorization: JWT $TOKEN" "https://hub.docker.com/v2/repositories/$REPOSITORY/tags/$TAG/")
              if [ "$DELETE_RESPONSE" == "204" ]; then
                echo "Deleted tag $TAG successfully."
              else
                echo "Failed to delete tag $TAG."
              fi
            done
          else
            echo "No tags to delete. Keeping the latest $KEEP tags."
          fi
      - name: List and Delete Old Tags for Menu-API
        env:
          DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_HUB_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          REPOSITORY="gabrielmirandat/postech-fiap-tc-menu-api"
          
          TOKEN_RAW=$(curl -s -X POST -H "Content-Type: application/json" -d "{\"username\": \"${DOCKER_HUB_USERNAME}\", \"password\": \"${DOCKER_HUB_PASSWORD}\"}" https://hub.docker.com/v2/users/login)
          TOKEN=$(echo $TOKEN_RAW | jq -r .token)
          
          if [ -z "$TOKEN" ] || [ "$TOKEN" == "null" ]; then
            echo "Failed to obtain token."
            exit 1
          fi
          
          TAGS=$(curl -s -H "Authorization: JWT $TOKEN" "https://hub.docker.com/v2/repositories/$REPOSITORY/tags" | jq -r '.results | sort_by(.tag_last_pushed) | .[].name')
          TAGS_ARRAY=($TAGS)
          TOTAL_TAGS=${#TAGS_ARRAY[@]}
          KEEP=5
          DELETE_COUNT=$(($TOTAL_TAGS-$KEEP))

          if [ $DELETE_COUNT -gt 0 ]; then
            for ((i=0; i<$DELETE_COUNT; i++)); do
              TAG=${TAGS_ARRAY[$i]}
              echo "Deleting tag $TAG from $REPOSITORY..."
              DELETE_RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" -X DELETE -H "Authorization: JWT $TOKEN" "https://hub.docker.com/v2/repositories/$REPOSITORY/tags/$TAG/")
              if [ "$DELETE_RESPONSE" == "204" ]; then
                echo "Deleted tag $TAG successfully."
              else
                echo "Failed to delete tag $TAG."
              fi
            done
          else
            echo "No tags to delete. Keeping the latest $KEEP tags."
          fi
  cleanup-tags:
    needs: tag
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Keep only the 30 most recent tags
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          echo "Listing tags..."
          tags=$(gh api repos/gabrielmirandat/postech-fiap-tc/git/refs/tags --paginate --jq '.[].ref' | sed 's|refs/tags/||')
          
          echo "Processing tags..."
          IFS=$'\n' read -r -d '' -a tags_array <<< "$tags"
          KEEP=5
          total_tags=${#tags_array[@]}
          
          echo "Total tags: $total_tags. Tags to potentially delete: $(($total_tags-$KEEP))"
          
          if [ "$total_tags" -gt "$KEEP" ]; then
            for ((i=KEEP; i<total_tags; i++)); do
              tag_to_delete=${tags_array[$i]}
              echo "Deleting tag: $tag_to_delete"
              gh api -X DELETE repos/gabrielmirandat/postech-fiap-tc/git/refs/tags/$tag_to_delete
              echo "$tag_to_delete would be deleted."
            done
          else
            echo "No tags to delete. Total tags ($total_tags) is less than or equal to the keep limit ($KEEP)."
          fi
    