name: Flow to merge to development from feature

on:
  push:
    branches:
      - develop

env:
  TF_LOG: DEBUG
  TF_DIR: ".terraform/"
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: |
            ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-m2
      - name: Install Protocol Buffers Compiler
        run: sudo apt-get update && sudo apt-get install -y protobuf-compiler
      - name: Check protoc version
        run: protoc --version
      - name: Set up JDK 21
        uses: actions/setup-java@v2
        with:
          java-version: '21'
          distribution: 'temurin'
      - name: Build with Maven
        run: mvn -B package -Dmaven.test.skip=true
  unit-test:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: |
            ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-m2
      - name: Install Protocol Buffers Compiler
        run: sudo apt-get update && sudo apt-get install -y protobuf-compiler
      - name: Check protoc version
        run: protoc --version
      - name: Set up JDK 21
        uses: actions/setup-java@v2
        with:
          java-version: '21'
          distribution: 'temurin'
      - name: Test with Maven
        run: mvn test -Punit-tests
  integration-test:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: |
            ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-m2
      - name: Install Protocol Buffers Compiler
        run: sudo apt-get update && sudo apt-get install -y protobuf-compiler
      - name: Check protoc version
        run: protoc --version
      - name: Set up JDK 21
        uses: actions/setup-java@v2
        with:
          java-version: '21'
          distribution: 'temurin'
      - name: Test with Maven
        run: mvn verify -Pintegration-tests
  terraform-plan-local:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup to run terraform
        uses: hashicorp/setup-terraform@v3
      - name: Format terraform files
        id: fmt
        run: terraform fmt -check
        working-directory: ${{ env.TF_DIR }}
      - name: Init configuration
        id: init
        run: terraform init
        working-directory: ${{ env.TF_DIR }}
      - name: Validate terraform script
        id: validate
        run: terraform validate -no-color
        working-directory: ${{ env.TF_DIR }}
      - name: Plan infra changes
        id: plan
        run: terraform plan -no-color -input=false
        working-directory: ${{ env.TF_DIR }}
        continue-on-error: true
      - name: Add commented changes
        uses: actions/github-script@v6
        env:
          PLAN: ${{ steps.plan.outputs.stdout }}
        with:
          github-token: ${{ secrets.PAT }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            
            <details><summary>Show Plan</summary>
            
            \`\`\`terraform\n
            ${process.env.PLAN}
            \`\`\`
            
            </details>
            
            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
      - name: Check status
        if: steps.plan.outcome == 'failure'
        run: exit 1
