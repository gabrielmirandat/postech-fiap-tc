name: Flow to deploy production artifact

on:
  push:
    branches:
     - main

env:
  TF_API_TOKEN: "${{ secrets.TF_API_TOKEN }}"
  TF_CLOUD_ORGANIZATION: "${{ secrets.TF_CLOUD_ORGANIZATION }}"
  TF_WORKSPACE: "${{ secrets.TF_WORKSPACE }}"
  TF_DIR: ".terraform/"

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install Protocol Buffers Compiler
        run: sudo apt-get update && sudo apt-get install -y protobuf-compiler
      - name: Check protoc version
        run: protoc --version
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: Build with Maven
        run: mvn -B package -Dmaven.test.skip=true
      - name: Upload orders-api artifact
        uses: actions/upload-artifact@v2
        with:
          name: orders-artifact
          path: |
            ./orders/target/orders*.jar
            ./orders/target/newrelic/newrelic.jar
            ./orders/src/main/resources/newrelic/newrelic.yml
      - name: Upload menu-api artifact
        uses: actions/upload-artifact@v2
        with:
          name: menu-artifact
          path: ./menu/target/menu*.jar
  terraform-apply:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Upload Configuration
        uses: hashicorp/tfc-workflows-github/actions/upload-configuration@v1.0.0
        id: apply-upload
        with:
          workspace: ${{ env.TF_WORKSPACE }}
          directory: ${{ env.TF_DIR }}
      - name: Create Apply Run
        uses: hashicorp/tfc-workflows-github/actions/create-run@v1.0.0
        id: apply-run
        with:
          workspace: ${{ env.TF_WORKSPACE }}
          configuration_version: ${{ steps.apply-upload.outputs.configuration_version_id }}
      - name: Apply
        uses: hashicorp/tfc-workflows-github/actions/apply-run@v1.0.0
        if: fromJSON(steps.apply-run.outputs.payload).data.attributes.actions.IsConfirmable
        id: apply
        with:
          run: ${{ steps.apply-run.outputs.run_id }}
          comment: "Apply Run from GitHub Actions CI ${{ github.sha }}"
  publish:
    needs: terraform-apply
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Download orders-api artifact
        uses: actions/download-artifact@v2
        with:
          name: orders-artifact
          path: ./temp/orders
      - name: Reorganize orders-api files
        run: |
          find ./temp/orders -type f -exec printf '%s\n' {} \;
          mkdir -p ./orders/target/newrelic
          mkdir -p ./orders/src/main/resources/newrelic
          mv ./temp/orders/target/newrelic/newrelic.jar ./orders/target/newrelic/newrelic.jar
          mv ./temp/orders/src/main/resources/newrelic/newrelic.yml ./orders/src/main/resources/newrelic/newrelic.yml
          mv ./temp/orders/target/orders-0.0.1-SNAPSHOT.jar ./orders/target/
      - name: Download menu-api artifact
        uses: actions/download-artifact@v2
        with:
          name: menu-artifact
          path: ./menu/target
      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build and push Docker images
        run: |
          ORDERS_REPOSITORY="gabrielmirandat/postech-fiap-tc-orders-api"
          MENU_REPOSITORY="gabrielmirandat/postech-fiap-tc-menu-api"
          SHORT_SHA=$(git rev-parse --short ${{ github.sha }})
          GEN_VERSION="v${{ github.run_number }}-$SHORT_SHA"
          
          docker build -t $ORDERS_REPOSITORY:$GEN_VERSION ./orders
          docker push $ORDERS_REPOSITORY:$GEN_VERSION
          docker build -t $MENU_REPOSITORY:$GEN_VERSION ./menu
          docker push $MENU_REPOSITORY:$GEN_VERSION
  tag:
    needs: publish
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Create and push tag
        run: |
          SHORT_SHA=$(git rev-parse --short ${{ github.sha }})
          GEN_VERSION="v${{ github.run_number }}-$SHORT_SHA"
          COMMIT_URL="https://github.com/${{ github.repository }}/commit/${{ github.sha }}"
          
          git config --global user.name 'github-actions'
          git config --global user.email 'github-actions@github.com'
          git tag -a $GEN_VERSION -m "Deploying version $GEN_VERSION. Details: $COMMIT_URL"
          git push origin $GEN_VERSION
  notify-publish:
    needs: publish
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Prepare Success Message
        if: ${{ needs.publish.result == 'success' }}
        run: |
          SHORT_SHA=$(git rev-parse --short ${{ github.sha }})
          GEN_VERSION="v${{ github.run_number }}-$SHORT_SHA"
          COMMIT_URL="https://github.com/${{ github.repository }}/commit/${{ github.sha }}"
          TAG_URL="https://github.com/${{ github.repository }}/releases/tag/$GEN_VERSION"
          
          echo "DISCORD_ARGS=A build ${{ github.run_number }} foi concluída com sucesso! Confira os detalhes no commit: $COMMIT_URL. Veja a tag da versão: $TAG_URL" >> $GITHUB_ENV
      - name: Prepare Failure Message
        if: ${{ needs.publish.result == 'failure' }}
        run: |
          SHORT_SHA=$(git rev-parse --short ${{ github.sha }})
          GEN_VERSION="v${{ github.run_number }}-$SHORT_SHA"
          WORKFLOW_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          echo "DISCORD_ARGS=A build $GEN_VERSION falhou. Confira os detalhes: $WORKFLOW_URL." >> $GITHUB_ENV
      - name: Notify Discord
        uses: Ilshidur/action-discord@master
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK_URL }}
        with:
          args: ${{ env.DISCORD_ARGS }}
  deploy:
    needs: publish
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Update kubeconfig
        run: |
          aws eks --region ${{ secrets.AWS_REGION }} update-kubeconfig --name ${{ secrets.CLUSTER_NAME }}
      - name: Update API versions
        run: |
          ORDERS_REPOSITORY="gabrielmirandat/postech-fiap-tc-orders-api"
          MENU_REPOSITORY="gabrielmirandat/postech-fiap-tc-menu-api"
          SHORT_SHA=$(git rev-parse --short ${{ github.sha }})
          GEN_VERSION="v${{ github.run_number }}-$SHORT_SHA"
          
          sed -i 's|<ORDERS_API_IMAGE>|'"$ORDERS_REPOSITORY:$GEN_VERSION"'|g' .k8s/orders-api-deployment.yaml
          sed -i 's|<MENU_API_IMAGE>|'"$MENU_REPOSITORY:$GEN_VERSION"'|g' .k8s/menu-api-deployment.yaml
      - name: Deploy to EKS
        run: |
          kubectl apply -f mongodb-secrets.yaml
          kubectl apply -f mongodb-deployment.yaml
          kubectl apply -f mongodb-service.yaml
          kubectl apply -f redis-deployment.yaml
          kubectl apply -f redis-service.yaml
          kubectl apply -f zookeeper-deployment.yaml
          kubectl apply -f zookeeper-service.yaml
          kubectl apply -f kafka-deployment.yaml
          kubectl apply -f kafka-service.yaml
          kubectl apply -f menu-api-deployment.yaml
          kubectl apply -f menu-api-service.yaml
          kubectl apply -f orders-api-deployment.yaml
          kubectl apply -f orders-api-service.yaml
  notify-deploy:
    needs: deploy
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Prepare Success Message
        if: ${{ needs.deploy.result == 'success' }}
        run: |
          SHORT_SHA=$(git rev-parse --short ${{ github.sha }})
          GEN_VERSION="v${{ github.run_number }}-$SHORT_SHA"
          COMMIT_URL="https://github.com/${{ github.repository }}/commit/${{ github.sha }}"
          TAG_URL="https://github.com/${{ github.repository }}/releases/tag/$GEN_VERSION"  
          echo "DISCORD_ARGS=O deploy ${{ github.run_number }} foi concluído com sucesso! Confira os detalhes no commit: $COMMIT_URL. Veja a tag da versão: $TAG_URL" >> $GITHUB_ENV
      - name: Prepare Failure Message
        if: ${{ needs.deploy.result == 'failure' }}
        run: |
          SHORT_SHA=$(git rev-parse --short ${{ github.sha }})
          GEN_VERSION="v${{ github.run_number }}-$SHORT_SHA"
          WORKFLOW_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          echo "DISCORD_ARGS=O deploy $GEN_VERSION falhou. Confira os detalhes: $WORKFLOW_URL." >> $GITHUB_ENV
      - name: Notify Discord
        uses: Ilshidur/action-discord@master
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK_URL }}
        with:
          args: ${{ env.DISCORD_ARGS }}
  cleanup-registry:
    needs: publish
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: List and Delete Old Tags for Orders-API
        env:
          DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_HUB_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          REPOSITORY="gabrielmirandat/postech-fiap-tc-orders-api"
          
          TOKEN_RAW=$(curl -s -X POST -H "Content-Type: application/json" -d "{\"username\": \"${DOCKER_HUB_USERNAME}\", \"password\": \"${DOCKER_HUB_PASSWORD}\"}" https://hub.docker.com/v2/users/login)
          TOKEN=$(echo $TOKEN_RAW | jq -r .token)
          
          if [ -z "$TOKEN" ] || [ "$TOKEN" == "null" ]; then
            echo "Failed to obtain token."
            exit 1
          fi
          
          TAGS=$(curl -s -H "Authorization: JWT $TOKEN" "https://hub.docker.com/v2/repositories/$REPOSITORY/tags" | jq -r '.results | sort_by(.tag_last_pushed) | .[].name')
          TAGS_ARRAY=($TAGS)
          TOTAL_TAGS=${#TAGS_ARRAY[@]}
          KEEP=5
          DELETE_COUNT=$(($TOTAL_TAGS-$KEEP))

          if [ $DELETE_COUNT -gt 0 ]; then
            for ((i=0; i<$DELETE_COUNT; i++)); do
              TAG=${TAGS_ARRAY[$i]}
              echo "Deleting tag $TAG from $REPOSITORY..."
              DELETE_RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" -X DELETE -H "Authorization: JWT $TOKEN" "https://hub.docker.com/v2/repositories/$REPOSITORY/tags/$TAG/")
              if [ "$DELETE_RESPONSE" == "204" ]; then
                echo "Deleted tag $TAG successfully."
              else
                echo "Failed to delete tag $TAG."
              fi
            done
          else
            echo "No tags to delete. Keeping the latest $KEEP tags."
          fi
      - name: List and Delete Old Tags for Menu-API
        env:
          DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_HUB_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          REPOSITORY="gabrielmirandat/postech-fiap-tc-menu-api"
          
          TOKEN_RAW=$(curl -s -X POST -H "Content-Type: application/json" -d "{\"username\": \"${DOCKER_HUB_USERNAME}\", \"password\": \"${DOCKER_HUB_PASSWORD}\"}" https://hub.docker.com/v2/users/login)
          TOKEN=$(echo $TOKEN_RAW | jq -r .token)
          
          if [ -z "$TOKEN" ] || [ "$TOKEN" == "null" ]; then
            echo "Failed to obtain token."
            exit 1
          fi
          
          TAGS=$(curl -s -H "Authorization: JWT $TOKEN" "https://hub.docker.com/v2/repositories/$REPOSITORY/tags" | jq -r '.results | sort_by(.tag_last_pushed) | .[].name')
          TAGS_ARRAY=($TAGS)
          TOTAL_TAGS=${#TAGS_ARRAY[@]}
          KEEP=5
          DELETE_COUNT=$(($TOTAL_TAGS-$KEEP))

          if [ $DELETE_COUNT -gt 0 ]; then
            for ((i=0; i<$DELETE_COUNT; i++)); do
              TAG=${TAGS_ARRAY[$i]}
              echo "Deleting tag $TAG from $REPOSITORY..."
              DELETE_RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" -X DELETE -H "Authorization: JWT $TOKEN" "https://hub.docker.com/v2/repositories/$REPOSITORY/tags/$TAG/")
              if [ "$DELETE_RESPONSE" == "204" ]; then
                echo "Deleted tag $TAG successfully."
              else
                echo "Failed to delete tag $TAG."
              fi
            done
          else
            echo "No tags to delete. Keeping the latest $KEEP tags."
          fi
  cleanup-tags:
    needs: tag
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Keep only most recent tags
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAGS=$(gh api repos/gabrielmirandat/postech-fiap-tc/tags --paginate --jq '.[].name')
          
          if [ -z "$TAGS" ]; then
            echo "No tags found or failed to list tags."
            exit 1
          fi
          
          KEEP=5
          TOTAL_TAGS=$(echo "$TAGS" | wc -l)
          echo "Total tags: $TOTAL_TAGS. Tags to potentially delete: $(($TOTAL_TAGS - $KEEP))"
          
          if [ "$TOTAL_TAGS" -gt "$KEEP" ]; then
            echo "Deleting excess tags..."
            echo "$TAGS" | tail -n +$(($KEEP + 1)) | while read TAG_TO_DELETE; do
              echo "Preparing to delete tag: $TAG_TO_DELETE"
              gh api -X DELETE repos/gabrielmirandat/postech-fiap-tc/git/refs/tags/$TAG_TO_DELETE
              echo "$TAG_TO_DELETE deleted."
            done
          else
            echo "No tags to delete. Total tags ($TOTAL_TAGS) is less than or equal to the keep limit ($KEEP)."
          fi
