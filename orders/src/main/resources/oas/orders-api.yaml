openapi: 3.0.2

info:
  title: Orders Core API
  version: 1.0.0
  description: Enable orders platform
  contact:
    name: Gabriel M. Miranda
    email: gabrielmirandatt@gmail.com
    url: https://gabrielmirandatt.com
  license:
    name: Apache 2.0
    url: 'https://www.apache.org/licenses/LICENSE-2.0'

tags:
  - name: orders
    description: Handling orders

servers:
  - url: http://localhost:8080

paths:
  /orders:
    get:
      tags:
        - orders
      summary: Find Orders By Query
      description: Filter orders by parameters
      operationId: findOrdersByQuery
      security:
        - BearerAuth:
            - orders:list
      parameters:
        - name: status
          in: query
          description: Status values that need to be considered for filter
          required: false
          schema:
            $ref: '#/components/schemas/OrderStatusDTO'
          examples:
            SEARCH_ORDERS_SUCCESS:
              value:
                CREATED
            SEARCH_ORDERS_BAD_REQUEST:
              value:
                INVALID
            SEARCH_ORDERS_INTERNAL_SERVER_ERROR:
              value:
                FORCE_FAILURE
      responses:
        '200':
          description: Order search response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OrderResponse'
              examples:
                SEARCH_ORDERS_SUCCESS:
                  value:
                    - id: "12345678-ORDR-1009-20-08"
                      ticketId: "12345678"
                      status: "created"
                      price: 20.50
                      customer:
                        cpf: "038.573.411-57"
                      shippingAddress:
                        street: "Vila Olivo"
                        city: "Valinhos"
                        state: "SP"
                        zip: "13011-300"
                      notification: "(19) 99644-3590"
                      items:
                        - itemId: "12345678-ORDI-1009-20-08"
                          product:
                            id: "12345678-PRDC-1009-20-08"
                            name: "X-Burger"
                            price: 10.90
                          extras:
                            - ingredient:
                                id: "12345678-INGR-1009-20-08"
                                name: "Costela meat"
                                price: 2.90
                              quantity: 1
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                SEARCH_ORDERS_BAD_REQUEST:
                  value:
                    status: 400
                    message: Bad Request
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                SEARCH_ORDERS_UNAUTHORIZED:
                  value:
                    status: 401
                    message: Unauthorized
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                SEARCH_ORDERS_FORBIDDEN:
                  value:
                    status: 403
                    message: Forbidden
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                SEARCH_ORDERS_INTERNAL_SERVER_ERROR:
                  value:
                    status: 500
                    message: Internal Server Error
    post:
      tags:
        - orders
      summary: Add New Order
      description: Add a new order in the restaurant
      operationId: addOrder
      security:
        - BearerAuth:
            - orders:add
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderRequest'
            examples:
              CREATE_ORDER_SUCCESS:
                value:
                  customer:
                    cpf: "038.573.411-57"
                  shippingAddress:
                    street: "Vila Olivo"
                    city: "Valinhos"
                    state: "SP"
                    zip: "13011-300"
                  notification: "(19) 99644-3590"
                  items:
                    - productId: "11111111-PRDC-1111-11-11"
                      extras:
                        - ingredientId: "11111111-INGR-1111-11-11"
                          quantity: 2
                      quantity: 2
              CREATE_ORDER_BAD_REQUEST:
                value:
                  customer:
                    govId: "038.573.411-57"
                  items:
                    - productId: "11111111-PRDC-1111-11-11"
                      extras:
                        - ingredientId: "11111111-INGR-1111-11-11"
                          quantity: 2
                      quantity: 2
              CREATE_ORDER_UNPROCESSABLE_ENTITY:
                value:
                  customer:
                    cpf: "038.573.411-57"
                  items:
                    - productId: "11111111-PRDC-1111-11-12"
                      extras:
                        - ingredientId: "11111111-INGR-1111-11-12"
                          quantity: 2
                      quantity: 2
              CREATE_ORDER_INTERNAL_SERVER_ERROR:
                value:
                  customer:
                    cpf: "038.573.411-57"
                  items:
                    - productId: "11111111-PRDC-1111-11-19"
                      extras:
                        - ingredientId: "11111111-INGR-1111-11-19"
                          quantity: 2
                      quantity: 2
      responses:
        '201':
          description: Order created response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderCreated'
              examples:
                CREATE_ORDER_SUCCESS:
                  value:
                    ticketId: "12345678"
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                CREATE_ORDER_BAD_REQUEST:
                  value:
                    status: 400
                    message: Bad Request
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                CREATE_ORDER_UNAUTHORIZED:
                  value:
                    status: 401
                    message: Unauthorized
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                CREATE_ORDER_FORBIDDEN:
                  value:
                    status: 403
                    message: Forbidden
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                CREATE_ORDER_UNPROCESSABLE_ENTITY:
                  value:
                    status: 422
                    message: Unprocessable Entity
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                CREATE_ORDER_INTERNAL_SERVER_ERROR:
                  value:
                    status: 500
                    message: Internal Server Error
  /orders/{orderId}:
    get:
      tags:
        - orders
      summary: Find Order By ID
      description: Returns a single order by ID
      operationId: getOrderById
      security:
        - BearerAuth:
            - orders:view
      parameters:
        - name: orderId
          in: path
          description: ID of order to return
          required: true
          schema:
            type: string
          examples:
            GET_ORDER_SUCCESS:
              value: "11111111"
            GET_ORDER_BAD_REQUEST:
              value: "INVALID"
            GET_ORDER_NOT_FOUND:
              value: "11111113"
            GET_ORDER_INTERNAL_SERVER_ERROR:
              value: "11111119"
      responses:
        '200':
          description: Get order response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponse'
              examples:
                GET_ORDER_SUCCESS:
                  value:
                    id: "11111111-ORDR-1111-11-11"
                    ticketId: "11111111"
                    status: "created"
                    price: 20.50
                    customer:
                      cpf: "038.573.411-57"
                    shippingAddress:
                      street: "Vila Olivo"
                      city: "Valinhos"
                      state: "SP"
                      zip: "13011-300"
                    notification: "(19) 99644-3590"
                    items:
                      - itemId: "11111111-ORDI-1111-11-11"
                        product:
                          id: "11111111-PRDC-1111-11-11"
                          name: "X-Burger"
                          price: 10.90
                        extras:
                          - ingredient:
                              id: "11111111-INGR-1111-11-11"
                              name: "Costela meat"
                              price: 2.90
                            quantity: 1
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                GET_ORDER__BAD_REQUEST:
                  value:
                    status: 400
                    message: Bad Request
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                GET_ORDER_UNAUTHORIZED:
                  value:
                    status: 401
                    message: Unauthorized
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                GET_ORDER_FORBIDDEN:
                  value:
                    status: 403
                    message: Forbidden
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                GET_ORDER_NOT_FOUND:
                  value:
                    status: 400
                    message: Bad Request
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                GET_ORDER_INTERNAL_SERVER_ERROR:
                  value:
                    status: 500
                    message: Internal Server Error
    delete:
      tags:
        - orders
      summary: Cancel Order
      description: Cancel an existing order by ID
      operationId: cancelOrder
      security:
        - BearerAuth:
            - orders:cancel
      parameters:
        - name: orderId
          in: path
          description: ID of the order to cancel
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Order cancelled successfully
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                CANCEL_ORDER_BAD_REQUEST:
                  value:
                    status: 400
                    message: Bad Request
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                CANCEL_ORDER_UNAUTHORIZED:
                  value:
                    status: 401
                    message: Unauthorized
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                CANCEL_ORDER_FORBIDDEN:
                  value:
                    status: 403
                    message: Forbidden
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                CANCEL_ORDER_NOT_FOUND:
                  value:
                    status: 404
                    message: Order not found
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                CANCEL_ORDER_INTERNAL_SERVER_ERROR:
                  value:
                    status: 500
                    message: Internal server error
  /orders/{id}/status/{status}:
    post:
      tags:
        - orders
      summary: Change Order Status
      description: Changes order status given step
      operationId: changeOrderStatus
      security:
        - BearerAuth:
            - orders:update
      parameters:
        - name: id
          in: path
          description: TicketId of order to change
          required: true
          schema:
            type: string
          examples:
            CHANGE_ORDER_STATUS_SUCCESS:
              value: "11111111"
            CHANGE_ORDER_STATUS_BAD_REQUEST:
              value: "INVALID"
            CHANGE_ORDER_STATUS_NOT_FOUND:
              value: "11111113"
            CHANGE_ORDER_STATUS_UNPROCESSABLE_ENTITY:
              value: "11111111"
            CHANGE_ORDER_STATUS_INTERNAL_SERVER_ERROR:
              value: "11111119"
        - name: status
          in: path
          description: Status to change
          required: true
          schema:
            $ref: '#/components/schemas/OrderStatusDTO'
          examples:
            CHANGE_ORDER_STATUS_SUCCESS:
              value: "PREPARATION"
            CHANGE_ORDER_STATUS_BAD_REQUEST:
              value: "PREPARATION"
            CHANGE_ORDER_STATUS_NOT_FOUND:
              value: "PREPARATION"
            CHANGE_ORDER_STATUS_UNPROCESSABLE_ENTITY:
              value: "DELIVERY"
            CHANGE_ORDER_STATUS_INTERNAL_SERVER_ERROR:
              value: "PREPARATION"
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderUpdated'
              examples:
                CHANGE_ORDER_STATUS_SUCCESS:
                  value:
                    id: "11111111"
                    status: "preparation"
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                CHANGE_ORDER_STATUS_BAD_REQUEST:
                  value:
                    status: 400
                    message: Bad Request
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                CHANGE_ORDER_STATUS_UNAUTHORIZED:
                  value:
                    status: 401
                    message: Unauthorized
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                CHANGE_ORDER_STATUS_FORBIDDEN:
                  value:
                    status: 403
                    message: Forbidden
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                CHANGE_ORDER_STATUS_NOT_FOUND:
                  value:
                    status: 404
                    message: Not Found
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                CHANGE_ORDER_STATUS_UNPROCESSABLE_ENTITY:
                  value:
                    status: 422
                    message: Unprocessable Entity
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                CHANGE_ORDER_STATUS_INTERNAL_SERVER_ERROR:
                  value:
                    status: 500
                    message: Internal Server Error

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    AddressDTO:
      type: object
      description: Address in case of delivery
      required:
        - street
        - city
        - state
        - zip
      properties:
        street:
          type: string
          maxLength: 30
        city:
          type: string
          maxLength: 30
        state:
          type: string
          minLength: 2
          maxLength: 2
        zip:
          type: string
    OrderStatusDTO:
      type: string
      description: Status of the order
      enum:
        - CREATED
        - PREPARATION
        - PACKAGING
        - PICKUP
        - DELIVERY
        - COMPLETED
        - INVALID
        - FORCE_FAILURE
    CustomerDTO:
      type: object
      description: Identified Customer in Order
      required:
        - cpf
      properties:
        cpf:
          type: string
          description: Customer identified CPF
    OrderExtraRequest:
      type: object
      required:
        - ingredientId
        - quantity
      properties:
        ingredientId:
          type: string
          description: IngredientId of the extra
        quantity:
          type: integer
          minimum: 1
          maximum: 2
          description: Quantity of extras of same ingredient
    OrderItemRequest:
      type: object
      required:
        - productId
        - quantity
      properties:
        productId:
          type: string
          description: ProductId of the item
        extras:
          type: array
          minItems: 1
          maxItems: 3
          description: Extras ingredients of the product
          items:
            $ref: '#/components/schemas/OrderExtraRequest'
        quantity:
          type: integer
          minimum: 1
          maximum: 10
          description: Quantity of same product with same extras
    OrderRequest:
      type: object
      required:
        - items
      properties:
        customer:
          $ref: '#/components/schemas/CustomerDTO'
        shippingAddress:
          $ref: '#/components/schemas/AddressDTO'
        notification:
          type: string
          description: Cellphone for additional notification when ready
        items:
          type: array
          description: Items of the Order
          items:
            $ref: '#/components/schemas/OrderItemRequest'
          minItems: 1
          maxItems: 10
    OrderCreated:
      type: object
      required:
        - ticketId
      properties:
        ticketId:
          type: string
          description: Generated ticketId for the Order
          minLength: 8
          maxLength: 8
    IngredientResponse:
      type: object
      description: Extra ingredient of the product
      required:
        - id
        - name
        - price
      properties:
        id:
          type: string
          description: ID of the Ingredient
        name:
          type: string
          description: Name of the Ingredient
          maxLength: 30
        price:
          type: number
          format: double
          description: Price of the ingredient
          minimum: 0.1
          maximum: 10000.0
    ProductResponse:
      type: object
      description: Product of the item
      required:
        - id
        - name
        - price
      properties:
        id:
          type: string
          description: ID of the Product
        name:
          type: string
          description: Name of the Product
          maxLength: 30
        price:
          type: number
          format: double
          description: Price of the product
          minimum: 0.1
          maximum: 10000.0
    OrderExtraResponse:
      type: object
      required:
        - ingredient
        - quantity
      properties:
        ingredient:
          $ref: '#/components/schemas/IngredientResponse'
        quantity:
          type: number
          description: Extra ingredient of the product
          minimum: 1
          maximum: 2
    OrderItemResponse:
      type: object
      required:
        - itemId
        - product
      properties:
        itemId:
          type: string
          description: ID of the item
        product:
          $ref: '#/components/schemas/ProductResponse'
        extras:
          type: array
          description: Extras of the Product
          items:
            $ref: '#/components/schemas/OrderExtraResponse'
          minItems: 1
          maxItems: 3
    OrderResponse:
      type: object
      required:
        - id
        - ticketId
        - status
        - price
        - items
      properties:
        id:
          type: string
          description: ID of the Order
        ticketId:
          type: string
          description: ticketId of the item, sent to customer
          minLength: 8
          maxLength: 8
        status:
          $ref: '#/components/schemas/OrderStatusDTO'
        price:
          type: number
          description: Price of the order
          format: double
          minimum: 0.1
          maximum: 10000.0
        customer:
          $ref: '#/components/schemas/CustomerDTO'
        shippingAddress:
          $ref: '#/components/schemas/AddressDTO'
        notification:
          type: string
          description: Mobile phone for additional notification
        items:
          type: array
          description: Items of the Order
          items:
            $ref: '#/components/schemas/OrderItemResponse'
          minItems: 1
          maxItems: 10
    OrderUpdated:
      type: object
      required:
        - id
        - updatedTo
      properties:
        id:
          type: string
          description: Id of the order
        updatedTo:
          $ref: '#/components/schemas/OrderStatusDTO'
    ErrorResponse:
      type: object
      required:
        - status
        - message
      properties:
        status:
          type: integer
          format: int32
          description: Status of the error
        message:
          type: string
          description: Message of the error
        code:
          type: string
          description: Specific code of the error
